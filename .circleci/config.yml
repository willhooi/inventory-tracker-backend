version: 2.1

orbs:
  docker: circleci/docker@2.1.4
  heroku: circleci/heroku@2.0.0
  snyk: snyk/snyk@1.5.0

jobs:
  #1. Build the Java app
  build:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-{{ checksum "pom.xml" }}
            - maven-
      - run:
          name: Resolve deps (offline)
          command: mvn -B -q -DskipTests dependency:go-offline
      - run:
          name: Package (skip tests)
          command: mvn -B -q -DskipTests package
      - save_cache:
          key: maven-{{ checksum "pom.xml" }}
          paths: [ "~/.m2" ]
          
  #2. Run tests
  test:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-{{ checksum "pom.xml" }}
            - maven-
      - run:
          name: Run getProductByIdTest
          command: >
            mvn -B -q
            -Dspring.profiles.active=test
            -Dtest='com.simple_inventory_tracker.project.controller.ProductControllerTest#getProductByIdTest'
            test
      - run:
          name: Run validProductCreationTest
          command: >
            mvn -B -q
            -Dspring.profiles.active=test
            -Dtest='com.simple_inventory_tracker.project.controller.ProductControllerTest#validProductCreationTest'
            test
      - run:
          name: Run invalidProductCreationTest
          command: >
            mvn -B -q
            -Dspring.profiles.active=test
            -Dtest='com.simple_inventory_tracker.project.controller.ProductControllerTest#invalidProductCreationTest'
            test

  #3. Build Docker image -> Synk scan -> push to Docker Hub
  docker_build:
    docker:
      - image: cimg/base:stable
    environment:
      IMAGE_NAME: willhooi/inventory-tracker
      IMAGE_TAG: << pipeline.git.revision >>
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: 
          name: Build Docker image & store temp img for scan
          command: |
            docker build -t $IMAGE_NAME:$IMAGE_TAG .
            docker save $IMAGE_NAME:$IMAGE_TAG -o /tmp/image.tar
      - persist_to_workspace:
          root: /tmp
          paths: [ image.tar]
    
  #4. Synk scan for vulnerabilites
  scan:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: /tmp
      - snyk/scan:
          docker-image-name: "/tmp/image.tar"
          #toggle to false to pass
          fail-on-issues: true
          severity-threshold: high
  
  #5. Push to Docker hub
  docker_push:
    docker:
      - image: cimg/base:stable
    environment:
      IMAGE_NAME: willhooi/inventory-tracker
      IMAGE_TAG: << pipeline.git.revision >>
    steps:
      - setup_remote_docker
      - docker/check
      - attach_workspace:
          at: /tmp
      - run:
          name: Load image from tar
          command: |
            docker load -i /tmp/image.tar
      - run:
          name: Push image to Docker hub
          command: |
            docker push $IMAGE_NAME:$IMAGE_TAG
  
  #6. Deploy from Docker hub
  deploy:
    docker:
      - image: cimg/base:stable
    environment:
      IMAGE_NAME: willhooi/inventory-tracker
      IMAGE_TAG: << pipeline.git.revision >>
      HEROKU_APP_NAME: sctp-inventory-tracker
    steps:
      - setup_remote_docker
      - docker/check
      - run:
          name: Pull image from Docker hub
          command: |
            docker pull $IMAGE_NAME:$IMAGE_TAG
      - heroku/install
      - run:
          name: Heroku deploy
          command: |
            heroku container:login
            docker tag $IMAGE_NAME:$IMAGE_TAG registry.heroku.com/$HEROKU_APP_NAME/web
            docker push registry.heroku.com/$HEROKU_APP_NAME/web
            heroku container:release web -a $HEROKU_APP_NAME

workflows:
  ci_cd_pipeline:
    jobs:
      # Build Java app on both develop and release
      - build:
          filters:
            branches:
              only:
                - develop
                - release

      # Run test after build on both branches
      - test:
          requires:
            - build 
          filters:
            branches:
              only:
                - develop
                - release

      # Docker build only on release & if tests passed
      - docker_build:
          requires:
            - test
          filters:
            branches:
              only: release
      
      #Snyk scan on release & if docker_build is successful
      - scan:
          requires:
            - docker_build
          filters:
            branches:
              only: release
      
      # Push to Docker hub only on release & if scan is successful
      - docker_push:
          requires:
            - scan
          filters:
            branches:
              only: release
      
      # Docker deploy to Heroku only on release & if docker_push successful
      - deploy:
          requires:
            - docker_push
          filters:
            branches:
              only: release

   